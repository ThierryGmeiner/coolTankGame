//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Game/Entity/Tank/Player/PlayerControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.InputSystem
{
    public partial class @PlayerControler : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControler()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControler"",
    ""maps"": [
        {
            ""name"": ""TankDrive"",
            ""id"": ""c3f672a9-810e-4f66-9492-3d680fe72485"",
            ""actions"": [
                {
                    ""name"": ""Turbo"",
                    ""type"": ""Button"",
                    ""id"": ""aea617b4-b226-40bf-b2d4-364f5937bc6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""255988a9-42fc-48f3-a93c-c05b36ae5cc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetPath"",
                    ""type"": ""Button"",
                    ""id"": ""27b63dde-70ca-46df-969d-638af953efde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""417cfc98-1e7a-45ef-930f-c0bcaf9b92bb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turbo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0779389c-5221-4a0c-87a6-9d922cdd2b56"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""675f6216-1258-438f-bf9d-9d93538a368f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TankAttack"",
            ""id"": ""2b7d887d-3b41-4b59-8f44-3b8a64d5b11e"",
            ""actions"": [
                {
                    ""name"": ""ShootAttack"",
                    ""type"": ""Button"",
                    ""id"": ""225cde7a-ff54-42f7-8e4d-86024b6ac028"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6eee167d-b427-4cd1-8955-ebd88067ff13"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TankDrive
            m_TankDrive = asset.FindActionMap("TankDrive", throwIfNotFound: true);
            m_TankDrive_Turbo = m_TankDrive.FindAction("Turbo", throwIfNotFound: true);
            m_TankDrive_Jump = m_TankDrive.FindAction("Jump", throwIfNotFound: true);
            m_TankDrive_SetPath = m_TankDrive.FindAction("SetPath", throwIfNotFound: true);
            // TankAttack
            m_TankAttack = asset.FindActionMap("TankAttack", throwIfNotFound: true);
            m_TankAttack_ShootAttack = m_TankAttack.FindAction("ShootAttack", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TankDrive
        private readonly InputActionMap m_TankDrive;
        private ITankDriveActions m_TankDriveActionsCallbackInterface;
        private readonly InputAction m_TankDrive_Turbo;
        private readonly InputAction m_TankDrive_Jump;
        private readonly InputAction m_TankDrive_SetPath;
        public struct TankDriveActions
        {
            private @PlayerControler m_Wrapper;
            public TankDriveActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
            public InputAction @Turbo => m_Wrapper.m_TankDrive_Turbo;
            public InputAction @Jump => m_Wrapper.m_TankDrive_Jump;
            public InputAction @SetPath => m_Wrapper.m_TankDrive_SetPath;
            public InputActionMap Get() { return m_Wrapper.m_TankDrive; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankDriveActions set) { return set.Get(); }
            public void SetCallbacks(ITankDriveActions instance)
            {
                if (m_Wrapper.m_TankDriveActionsCallbackInterface != null)
                {
                    @Turbo.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnTurbo;
                    @Turbo.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnTurbo;
                    @Turbo.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnTurbo;
                    @Jump.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @SetPath.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnSetPath;
                    @SetPath.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnSetPath;
                    @SetPath.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnSetPath;
                }
                m_Wrapper.m_TankDriveActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Turbo.started += instance.OnTurbo;
                    @Turbo.performed += instance.OnTurbo;
                    @Turbo.canceled += instance.OnTurbo;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @SetPath.started += instance.OnSetPath;
                    @SetPath.performed += instance.OnSetPath;
                    @SetPath.canceled += instance.OnSetPath;
                }
            }
        }
        public TankDriveActions @TankDrive => new TankDriveActions(this);

        // TankAttack
        private readonly InputActionMap m_TankAttack;
        private ITankAttackActions m_TankAttackActionsCallbackInterface;
        private readonly InputAction m_TankAttack_ShootAttack;
        public struct TankAttackActions
        {
            private @PlayerControler m_Wrapper;
            public TankAttackActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
            public InputAction @ShootAttack => m_Wrapper.m_TankAttack_ShootAttack;
            public InputActionMap Get() { return m_Wrapper.m_TankAttack; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankAttackActions set) { return set.Get(); }
            public void SetCallbacks(ITankAttackActions instance)
            {
                if (m_Wrapper.m_TankAttackActionsCallbackInterface != null)
                {
                    @ShootAttack.started -= m_Wrapper.m_TankAttackActionsCallbackInterface.OnShootAttack;
                    @ShootAttack.performed -= m_Wrapper.m_TankAttackActionsCallbackInterface.OnShootAttack;
                    @ShootAttack.canceled -= m_Wrapper.m_TankAttackActionsCallbackInterface.OnShootAttack;
                }
                m_Wrapper.m_TankAttackActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ShootAttack.started += instance.OnShootAttack;
                    @ShootAttack.performed += instance.OnShootAttack;
                    @ShootAttack.canceled += instance.OnShootAttack;
                }
            }
        }
        public TankAttackActions @TankAttack => new TankAttackActions(this);
        public interface ITankDriveActions
        {
            void OnTurbo(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnSetPath(InputAction.CallbackContext context);
        }
        public interface ITankAttackActions
        {
            void OnShootAttack(InputAction.CallbackContext context);
        }
    }
}
