//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Game/Entity/Tank/Player/PlayerControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Input
{
    public partial class @PlayerControler : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControler()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControler"",
    ""maps"": [
        {
            ""name"": ""TankDrive"",
            ""id"": ""c3f672a9-810e-4f66-9492-3d680fe72485"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cd8165b4-d128-4075-b636-093310049f26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turbo"",
                    ""type"": ""Button"",
                    ""id"": ""aea617b4-b226-40bf-b2d4-364f5937bc6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""255988a9-42fc-48f3-a93c-c05b36ae5cc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6da44fe5-7927-484a-82c8-0f2b26b1c965"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e51f15a-cfc1-4d64-9eeb-fdf501329407"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""41a6ff5e-6f6c-4e07-99a9-73cd858a8e68"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""588e1be3-c6a8-4bf2-b06c-8231a30ab11c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2325f767-eb8f-40a0-ad1f-553991978f41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""417cfc98-1e7a-45ef-930f-c0bcaf9b92bb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turbo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0779389c-5221-4a0c-87a6-9d922cdd2b56"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TankDrive
            m_TankDrive = asset.FindActionMap("TankDrive", throwIfNotFound: true);
            m_TankDrive_Move = m_TankDrive.FindAction("Move", throwIfNotFound: true);
            m_TankDrive_Turbo = m_TankDrive.FindAction("Turbo", throwIfNotFound: true);
            m_TankDrive_Jump = m_TankDrive.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TankDrive
        private readonly InputActionMap m_TankDrive;
        private ITankDriveActions m_TankDriveActionsCallbackInterface;
        private readonly InputAction m_TankDrive_Move;
        private readonly InputAction m_TankDrive_Turbo;
        private readonly InputAction m_TankDrive_Jump;
        public struct TankDriveActions
        {
            private @PlayerControler m_Wrapper;
            public TankDriveActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_TankDrive_Move;
            public InputAction @Turbo => m_Wrapper.m_TankDrive_Turbo;
            public InputAction @Jump => m_Wrapper.m_TankDrive_Jump;
            public InputActionMap Get() { return m_Wrapper.m_TankDrive; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankDriveActions set) { return set.Get(); }
            public void SetCallbacks(ITankDriveActions instance)
            {
                if (m_Wrapper.m_TankDriveActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnMove;
                    @Turbo.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnTurbo;
                    @Turbo.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnTurbo;
                    @Turbo.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnTurbo;
                    @Jump.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_TankDriveActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Turbo.started += instance.OnTurbo;
                    @Turbo.performed += instance.OnTurbo;
                    @Turbo.canceled += instance.OnTurbo;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public TankDriveActions @TankDrive => new TankDriveActions(this);
        public interface ITankDriveActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnTurbo(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
