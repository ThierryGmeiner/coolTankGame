//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Game/Entity/Tank/Player/PlayerControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.InputSystem
{
    public partial class @PlayerControler : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControler()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControler"",
    ""maps"": [
        {
            ""name"": ""TankDrive"",
            ""id"": ""c3f672a9-810e-4f66-9492-3d680fe72485"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""255988a9-42fc-48f3-a93c-c05b36ae5cc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetPath"",
                    ""type"": ""Button"",
                    ""id"": ""27b63dde-70ca-46df-969d-638af953efde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0779389c-5221-4a0c-87a6-9d922cdd2b56"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""675f6216-1258-438f-bf9d-9d93538a368f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TankAttack"",
            ""id"": ""2b7d887d-3b41-4b59-8f44-3b8a64d5b11e"",
            ""actions"": [
                {
                    ""name"": ""ShootAttack"",
                    ""type"": ""Button"",
                    ""id"": ""225cde7a-ff54-42f7-8e4d-86024b6ac028"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6eee167d-b427-4cd1-8955-ebd88067ff13"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""479350e7-073e-4c6e-a536-6be3fd843bbe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5cf00569-0a43-48d9-97bf-1d94c29073d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveFaster"",
                    ""type"": ""Button"",
                    ""id"": ""bcb6f22f-d8c5-4291-894f-16c9c5ff28e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockCamera"",
                    ""type"": ""Button"",
                    ""id"": ""21b809df-d370-4598-9365-3e9aa6872da2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FindPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""4552ac23-8a30-4e3c-b14c-0ca4bfb3fe16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f14527fb-7a02-4178-8104-c1f620b8902e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e0ffd44b-bb32-47cf-8ea6-ddaee88d631c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ec5203c8-418b-4947-8d8e-7a6c1e33f712"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a8fd2ba0-0ad2-40aa-8de0-ad119190c9c2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9980f372-e0e7-4edd-9dc4-4bc0d11ed2fa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""df1ad329-79c2-4bad-abcc-070b6650ffe6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d7cb476-ddef-4510-8470-abeecd1977cc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FindPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dc3ed16-6d70-4a5a-bf5e-0cf3c0bf5263"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFaster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TankDrive
            m_TankDrive = asset.FindActionMap("TankDrive", throwIfNotFound: true);
            m_TankDrive_Jump = m_TankDrive.FindAction("Jump", throwIfNotFound: true);
            m_TankDrive_SetPath = m_TankDrive.FindAction("SetPath", throwIfNotFound: true);
            // TankAttack
            m_TankAttack = asset.FindActionMap("TankAttack", throwIfNotFound: true);
            m_TankAttack_ShootAttack = m_TankAttack.FindAction("ShootAttack", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Move = m_Camera.FindAction("Move", throwIfNotFound: true);
            m_Camera_MoveFaster = m_Camera.FindAction("MoveFaster", throwIfNotFound: true);
            m_Camera_LockCamera = m_Camera.FindAction("LockCamera", throwIfNotFound: true);
            m_Camera_FindPlayer = m_Camera.FindAction("FindPlayer", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TankDrive
        private readonly InputActionMap m_TankDrive;
        private ITankDriveActions m_TankDriveActionsCallbackInterface;
        private readonly InputAction m_TankDrive_Jump;
        private readonly InputAction m_TankDrive_SetPath;
        public struct TankDriveActions
        {
            private @PlayerControler m_Wrapper;
            public TankDriveActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_TankDrive_Jump;
            public InputAction @SetPath => m_Wrapper.m_TankDrive_SetPath;
            public InputActionMap Get() { return m_Wrapper.m_TankDrive; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankDriveActions set) { return set.Get(); }
            public void SetCallbacks(ITankDriveActions instance)
            {
                if (m_Wrapper.m_TankDriveActionsCallbackInterface != null)
                {
                    @Jump.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnJump;
                    @SetPath.started -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnSetPath;
                    @SetPath.performed -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnSetPath;
                    @SetPath.canceled -= m_Wrapper.m_TankDriveActionsCallbackInterface.OnSetPath;
                }
                m_Wrapper.m_TankDriveActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @SetPath.started += instance.OnSetPath;
                    @SetPath.performed += instance.OnSetPath;
                    @SetPath.canceled += instance.OnSetPath;
                }
            }
        }
        public TankDriveActions @TankDrive => new TankDriveActions(this);

        // TankAttack
        private readonly InputActionMap m_TankAttack;
        private ITankAttackActions m_TankAttackActionsCallbackInterface;
        private readonly InputAction m_TankAttack_ShootAttack;
        public struct TankAttackActions
        {
            private @PlayerControler m_Wrapper;
            public TankAttackActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
            public InputAction @ShootAttack => m_Wrapper.m_TankAttack_ShootAttack;
            public InputActionMap Get() { return m_Wrapper.m_TankAttack; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankAttackActions set) { return set.Get(); }
            public void SetCallbacks(ITankAttackActions instance)
            {
                if (m_Wrapper.m_TankAttackActionsCallbackInterface != null)
                {
                    @ShootAttack.started -= m_Wrapper.m_TankAttackActionsCallbackInterface.OnShootAttack;
                    @ShootAttack.performed -= m_Wrapper.m_TankAttackActionsCallbackInterface.OnShootAttack;
                    @ShootAttack.canceled -= m_Wrapper.m_TankAttackActionsCallbackInterface.OnShootAttack;
                }
                m_Wrapper.m_TankAttackActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ShootAttack.started += instance.OnShootAttack;
                    @ShootAttack.performed += instance.OnShootAttack;
                    @ShootAttack.canceled += instance.OnShootAttack;
                }
            }
        }
        public TankAttackActions @TankAttack => new TankAttackActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Move;
        private readonly InputAction m_Camera_MoveFaster;
        private readonly InputAction m_Camera_LockCamera;
        private readonly InputAction m_Camera_FindPlayer;
        public struct CameraActions
        {
            private @PlayerControler m_Wrapper;
            public CameraActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Camera_Move;
            public InputAction @MoveFaster => m_Wrapper.m_Camera_MoveFaster;
            public InputAction @LockCamera => m_Wrapper.m_Camera_LockCamera;
            public InputAction @FindPlayer => m_Wrapper.m_Camera_FindPlayer;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                    @MoveFaster.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveFaster;
                    @MoveFaster.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveFaster;
                    @MoveFaster.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveFaster;
                    @LockCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLockCamera;
                    @LockCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLockCamera;
                    @LockCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLockCamera;
                    @FindPlayer.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnFindPlayer;
                    @FindPlayer.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnFindPlayer;
                    @FindPlayer.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnFindPlayer;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @MoveFaster.started += instance.OnMoveFaster;
                    @MoveFaster.performed += instance.OnMoveFaster;
                    @MoveFaster.canceled += instance.OnMoveFaster;
                    @LockCamera.started += instance.OnLockCamera;
                    @LockCamera.performed += instance.OnLockCamera;
                    @LockCamera.canceled += instance.OnLockCamera;
                    @FindPlayer.started += instance.OnFindPlayer;
                    @FindPlayer.performed += instance.OnFindPlayer;
                    @FindPlayer.canceled += instance.OnFindPlayer;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface ITankDriveActions
        {
            void OnJump(InputAction.CallbackContext context);
            void OnSetPath(InputAction.CallbackContext context);
        }
        public interface ITankAttackActions
        {
            void OnShootAttack(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMoveFaster(InputAction.CallbackContext context);
            void OnLockCamera(InputAction.CallbackContext context);
            void OnFindPlayer(InputAction.CallbackContext context);
        }
    }
}
